<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cyl&#39;s blog</title>
  
  
  <link href="https://ysln.github.io/atom.xml" rel="self"/>
  
  <link href="https://ysln.github.io/"/>
  <updated>2021-05-01T07:41:10.237Z</updated>
  <id>https://ysln.github.io/</id>
  
  <author>
    <name>yl.chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello</title>
    <link href="https://ysln.github.io/2021/05/01/hello/"/>
    <id>https://ysln.github.io/2021/05/01/hello/</id>
    <published>2021-05-01T07:41:10.000Z</published>
    <updated>2021-05-01T07:41:10.237Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言实现Real-Eval-Print-Loop (REPL)</title>
    <link href="https://ysln.github.io/2021/05/01/crepl/"/>
    <id>https://ysln.github.io/2021/05/01/crepl/</id>
    <published>2021-05-01T07:11:46.598Z</published>
    <updated>2021-05-01T08:31:06.690Z</updated>
    
    <content type="html"><![CDATA[<p>很多现代编程语言都提供了交互式的REPL, 比如Python. 在REPL中, 除了进行简单的数值计算外(类似计算器), 还可以动态创建函数, 并在之后调用它. 基于”解释执行”的程序设计语言(包括shell本身)天生就具有这种交互式的工作模式.</p><p>这个实验的目的是使用C语言实现一个简易的REPL. 最终效果如下:</p><img src="crepl\image-20210501112153656.png" alt="image-20210501112153656" style="zoom: 67%;" /><p><img src="/2021/05/01/crepl/image-20210501112153656.png"></p><p><em><strong>这个技术和现代虚拟机中的即时编译 (just-in-time) 技术是非常相关的：在程序运行时 (而非程序执行前) 进行编译，并将编译得到的二进制代码 (指令/数据) 动态加载。</strong></em> — 摘自<a href="http://jyywiki.cn/OS/2021/labs/M4">jyy的实验指南</a>.</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>C语言是一种编译型的语言, 源文件到二进制文件需要经过编译和链接(link)两个过程. 链接主要完成的工作是<strong>符号解析</strong>和<strong>重定位</strong>. </p><p>如果是静态链接的程序(<code>-static</code>), 类型为<code>Executable file(EXEC)</code>, 即<strong>可执行文件</strong>. 程序中的所有符号都是被完全解析的, 比如所有函数符号的地址都是确定的, 可以直接调用.</p><p>GCC默认生成的二进制文件是动态链接的,  生成的文件文件类型为<code>Shared object file(DYN)</code>. 一个动态链接的程序从磁盘(disk)上刚加载出来时是**不完整(部分链接)**的, 比如程序调用的位于glibc动态链接库中的<code>printf</code>函数地址是未知的. 内核(加载器)不能立即把控制权交给该程序(即跳转到<code>entry</code>). 因此, 需要另外的辅助程序(<code> helper program</code>)的帮助 — <strong><code>dynamic linker</code></strong>, (一般是ld.so). 它的任务是: <strong>加载程序依赖的DSOs(动态链接库, 比如glibc), 并完成重定位(<code>relocation</code>)</strong>.</p><p>因此, 要想实现一个交互式的REPL, 在程序运行时动态的在其地址空间内加入新的函数符号, 本质上是实现动态链接器的功能.</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>C语言实现的REPL的工作流程如下:</p><ol><li>读取用户的输入.</li><li>把输入的内容写入一个临时的源文件, 并把其编译成一个动态链接库.</li><li>把动态链接库加载到进程的地址空间.</li><li>计算用户输入的表达式, 输出结果.</li><li>重复上述步骤.</li></ol><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><img src="H:\hexo\source\_posts\crepl\image-20210501122331359.png" alt="image-20210501122331359" style="zoom:67%;" /><p>这里有以下注意事项:</p><ul><li><p>如果用户输入不是函数, 而是表达式, 比如”5 + 6”, 该怎么办? 一个很自然(看完jyy的实验指南后确实很自然…)的想法是把表达式”包装”(wrap)成一个函数, 比如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __wrap_func() &#123; <span class="keyword">return</span> <span class="number">5</span> + <span class="number">6</span>;&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里实现”即时编译”的方法是<code>fork</code>一个子进程, 让子进程执行GCC, 主要是<code>exec</code>函数族(l, v, p, e的组合)的使用, 要注意<code>argv[0]</code>需要为可执行文件的名字.  注意这里把子进程的标准输出和标错误都关闭了, 防止gcc的输出影响.</p><p>这里还有一点是如果用户输入”f() + 6”, 那么源文件的内容为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __wrap_func() &#123; <span class="keyword">return</span> f() + <span class="number">6</span>;&#125;</span><br></pre></td></tr></table></figure><p>此时gcc编译会给出警告: “f”未定义. 如果”f”在之前定义了, 那么这个警告就无关紧要. 就算”f”没有定义, 也没有关系, 可以把出错处理推迟到加载阶段.</p></li></ul><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><img src="H:\hexo\source\_posts\crepl\image-20210501130905417.png" alt="image-20210501130905417" style="zoom:67%;" /><p>可以使用<code>dlopen</code>在运行时加载一个so文件到当前进程的地址空间中. 这里需要注意<code>dlopen</code>的flag参数:</p><ul><li><p><code>RTLD_GLOBAL</code>是必不可少的, 其含义是: 当前加载的so中的符号对其他so可见, 也就是说之后加载的so符号解析时, 可以使用这个so中的符号. 与其相对的是<code>RTLD_LOCAL</code>. 如果去掉<code>RTLD_GLOBAL</code>, 会出现以下这种情况:</p><img src="H:\hexo\source\_posts\crepl\image-20210501131258559.png" alt="image-20210501131258559" style="zoom:67%;" /><p>注意表达式”f()”也会被”wrap”成一个函数, 并编译成so. </p></li><li><p><code>RTLD_NOW</code>也是必不可少的, 其含义是: 在加载so时就进行(函数)符号解析. 与之相对的是<code>RTLD_LAZY</code>, 表示对应的函数符号解析推迟到函数被调用时. </p><p>使用<code>RTLD_LAZY</code>参数有以下实验现象:</p><img src="H:\hexo\source\_posts\crepl\image-20210501132200769.png" alt="image-20210501132200769" style="zoom:67%;" /><img src="H:\hexo\source\_posts\crepl\image-20210501132529794.png" alt="image-20210501132529794" style="zoom:67%;" /><p>也就是说, 定义函数时<strong>可以</strong>使用<strong>当前还未定义</strong>的符号, <code>dlopen</code>时不会报错(因为不会进行符号解析). 但是调用时如果找不到对应的函数符号, 进程会直接crash, 结束运行.</p><p>而使用<code>RTLD_NOW</code>参数有以下实验现象:</p><img src="H:\hexo\source\_posts\crepl\image-20210501132836648.png" alt="image-20210501132836648" style="zoom:67%;" /><p>也就是说定义函数时<strong>不允许</strong>使用<strong>当前还未定义</strong>的符号, 也不能直接使用未定义的函数计算,  <code>dlopen</code>进行符号解析时就会出错. 因此, 这才是我们想要的行为.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很多现代编程语言都提供了交互式的REPL, 比如Python. 在REPL中, 除了进行简单的数值计算外(类似计算器), 还可以动态创建函数, 并在之后调用它. 基于”解释执行”的程序设计语言(包括shell本身)天生就具有这种交互式的工作模式.&lt;/p&gt;
&lt;p&gt;这个实验的目</summary>
      
    
    
    
    
  </entry>
  
</feed>
